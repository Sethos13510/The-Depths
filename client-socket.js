// Module de communication Socket.IO pour les interfaces client (admin et sethos)
console.log('üîÑ Initialisation du module client-socket.js...');

// Configuration
const SERVER_URL = 'http://localhost:3333';
let socket = null;
let isConnected = false;
let clientType = 'unknown'; // 'admin' ou 'sethos'
let reconnectInterval = null;
let eventListeners = {};

// Initialiser la connexion Socket.IO
function initSocket(type) {
    if (!type || (type !== 'admin' && type !== 'sethos')) {
        console.error('‚ùå Type de client invalide. Utilisez "admin" ou "sethos"');
        return false;
    }
    
    clientType = type;
    console.log(`üîÑ Initialisation de la connexion Socket.IO en tant que "${clientType}"`);
    
    try {
        // V√©rifier si la biblioth√®que Socket.IO est charg√©e
        if (typeof io === 'undefined') {
            console.error('‚ùå La biblioth√®que Socket.IO n\'est pas charg√©e');
            
            // Charger dynamiquement Socket.IO si n√©cessaire
            const script = document.createElement('script');
            script.src = 'https://cdn.socket.io/4.6.0/socket.io.min.js';
            script.onload = function() {
                console.log('‚úÖ Socket.IO charg√© dynamiquement');
                connectSocket();
            };
            document.head.appendChild(script);
            return false;
        }
        
        connectSocket();
        return true;
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation Socket.IO:', error);
        return false;
    }
}

// √âtablir la connexion Socket.IO
function connectSocket() {
    try {
        // Cr√©er la connexion
        socket = io(SERVER_URL);
        
        // Gestionnaire d'√©v√©nements de connexion
        socket.on('connect', () => {
            console.log(`‚úÖ Connect√© au serveur: ${socket.id}`);
            isConnected = true;
            
            // S'enregistrer aupr√®s du serveur
            socket.emit('register_client', { type: clientType });
            
            // Effacer l'intervalle de reconnexion si pr√©sent
            if (reconnectInterval) {
                clearInterval(reconnectInterval);
                reconnectInterval = null;
            }
            
            // D√©clencher l'√©v√©nement personnalis√© de connexion
            triggerEvent('connected', { socketId: socket.id });
        });
        
        // Gestionnaire d'√©v√©nements de d√©connexion
        socket.on('disconnect', () => {
            console.log('‚ùå D√©connect√© du serveur');
            isConnected = false;
            
            // Mettre en place une tentative de reconnexion automatique
            if (!reconnectInterval) {
                reconnectInterval = setInterval(() => {
                    console.log('üîÑ Tentative de reconnexion...');
                    if (!isConnected && socket) {
                        socket.connect();
                    } else if (isConnected) {
                        clearInterval(reconnectInterval);
                        reconnectInterval = null;
                    }
                }, 5000); // Toutes les 5 secondes
            }
            
            // D√©clencher l'√©v√©nement personnalis√© de d√©connexion
            triggerEvent('disconnected');
        });
        
        // Gestionnaire pour l'√©tat du syst√®me
        socket.on('system_state', (data) => {
            console.log('üìä √âtat du syst√®me re√ßu:', data);
            triggerEvent('system_state', data);
        });
        
        // Gestionnaire pour les √©v√©nements g√©n√©raux
        socket.on('event', (data) => {
            console.log('üì¢ √âv√©nement re√ßu:', data);
            triggerEvent('event', data);
            
            // Traitement sp√©cifique selon le type d'√©v√©nement
            if (data.type === 'donation') {
                triggerEvent('donation', data);
            }
        });
        
        // Gestionnaire pour les √©v√©nements TikTok
        socket.on('tiktokEvent', (data) => {
            console.log('üé¨ √âv√©nement TikTok re√ßu:', data);
            triggerEvent('tiktokEvent', data);
        });
        
        // Gestionnaire pour les paliers activ√©s
        socket.on('tier_activated', (data) => {
            console.log('üèÜ Palier activ√©:', data);
            triggerEvent('tier_activated', data);
        });
        
        // Gestionnaire pour les actions sp√©ciales
        socket.on('special_action', (data) => {
            console.log('üé¨ Action sp√©ciale re√ßue:', data);
            triggerEvent('special_action', data);
        });
        
        return true;
    } catch (error) {
        console.error('‚ùå Erreur lors de la connexion Socket.IO:', error);
        return false;
    }
}

// Simuler un don
function simulateDonation(amount, username, message) {
    if (!isConnected || !socket) {
        console.error('‚ùå Non connect√© au serveur');
        return false;
    }
    
    const data = {
        amount: amount || 20,
        username: username || 'Anonyme',
        message: message || ''
    };
    
    console.log('üí∞ Simulation d\'un don:', data);
    socket.emit('simulateDonation', data);
    return true;
}

// Mettre √† jour les seuils (thresholds)
function updateThresholds(thresholds) {
    if (!isConnected || !socket) {
        console.error('‚ùå Non connect√© au serveur');
        return false;
    }
    
    if (!thresholds || !thresholds.tiers) {
        console.error('‚ùå Format de seuils invalide');
        return false;
    }
    
    console.log('üîÑ Mise √† jour des seuils:', thresholds);
    socket.emit('update_thresholds', thresholds);
    return true;
}

// Envoyer une action sp√©ciale
function sendSpecialAction(action, params) {
    if (!isConnected || !socket) {
        console.error('‚ùå Non connect√© au serveur');
        return false;
    }
    
    const data = {
        action: action,
        params: params || {},
        source: clientType,
        timestamp: new Date().toISOString()
    };
    
    console.log('üé¨ Envoi d\'une action sp√©ciale:', data);
    socket.emit('special_action', data);
    return true;
}

// Ajouter un √©couteur d'√©v√©nement personnalis√©
function addEventListener(event, callback) {
    if (!eventListeners[event]) {
        eventListeners[event] = [];
    }
    
    eventListeners[event].push(callback);
    console.log(`üìù √âcouteur ajout√© pour l'√©v√©nement "${event}"`);
    return true;
}

// Supprimer un √©couteur d'√©v√©nement personnalis√©
function removeEventListener(event, callback) {
    if (!eventListeners[event]) {
        return false;
    }
    
    const index = eventListeners[event].indexOf(callback);
    if (index !== -1) {
        eventListeners[event].splice(index, 1);
        console.log(`üóëÔ∏è √âcouteur supprim√© pour l'√©v√©nement "${event}"`);
        return true;
    }
    
    return false;
}

// D√©clencher un √©v√©nement personnalis√©
function triggerEvent(event, data) {
    if (!eventListeners[event]) {
        return false;
    }
    
    eventListeners[event].forEach((callback) => {
        try {
            callback(data);
        } catch (error) {
            console.error(`‚ùå Erreur dans l'√©couteur pour "${event}":`, error);
        }
    });
    
    return true;
}

// V√©rifier l'√©tat de la connexion
function isSocketConnected() {
    return isConnected;
}

// Se d√©connecter explicitement
function disconnect() {
    if (socket) {
        socket.disconnect();
        isConnected = false;
        console.log('üîå D√©connexion manuelle du serveur');
        
        if (reconnectInterval) {
            clearInterval(reconnectInterval);
            reconnectInterval = null;
        }
        
        return true;
    }
    
    return false;
}

// Exposer les fonctions publiques
window.SethosSocket = {
    init: initSocket,
    simulateDonation: simulateDonation,
    updateThresholds: updateThresholds,
    sendSpecialAction: sendSpecialAction,
    addEventListener: addEventListener,
    removeEventListener: removeEventListener,
    isConnected: isSocketConnected,
    disconnect: disconnect
}; 